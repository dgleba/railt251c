#!/usr/bin/env ruby
# encoding: utf-8
require 'securerandom'

def setup!
  within_project_root do
    test 'ruby -v' => ruby_version
    run  'gem install bundler --no-document --conservative'
#    test 'node -v' => 'v'
#    run  'npm update -g npm'
#    run  'npm install -g bower --no-spin'
    run  'rbenv rehash' if rbenv_installed?
    run  'bundle install'
    run  'rbenv rehash' if rbenv_installed?
    copy 'example.env'
    test_local_env_contains_required_keys
    run  'bin/rake db:create:all'
    

    run  'bin/rake db:migrate'
    run  'bin/rake db:seed'
#    run  'bin/rake bower:install:development'
  end
end

require 'fileutils'
begin
  require 'highline'
rescue LoadError
  # If highline is missing, we'll gracefully omit ansi color output
end

def within_project_root(&block)
  Dir.chdir(File.expand_path('../..', __FILE__), &block)
end

def test(opts)
  command, output = opts.first

  log(:yellow, "test #{command}") do
    unless `#{command}`.include?(output)
      die("#{command} does not include #{output}")
    end
  end
end

def ruby_version
  @ruby_version ||= begin
    IO.read('.ruby-version').strip
  end
end

def run(command)
  log(:blue, "run  #{command}") do
    shell = "#{command} > /dev/null"
    system(shell) || die("#{command} exited with non-zero status}")
  end
end

def rbenv_installed?
  @rbenv_installed ||= (`which rbenv`.length > 0 || :not_installed)
  @rbenv_installed != :not_installed
end

def copy(example_path)
  copy_path = example_path.sub(/\.?example/, '')
  return if File.exist?(copy_path)

  log(:magenta, "copy #{example_path} → #{copy_path}") do
    FileUtils.cp(example_path, copy_path)
  end
  generate_secret_key_base
end

def generate_secret_key_base
  log(:magenta, "generating secret key base") do
    File.write('.env', File.open('.env', &:read).gsub('SECRET_KEY_BASE=',"SECRET_KEY_BASE=#{SecureRandom.hex(64)}"))
  end
end

def test_local_env_contains_required_keys
  keys = ->(f) { IO.readlines(f).map { |l| l[/^([^#\s][^=\s]*)/, 1] }.compact }

  log(:yellow, 'test .env contents') do
    missing = keys['example.env'] - keys['.env']
    die("Your .env file is missing #{missing.join(', ')}") if missing.any?
  end
end

def log(color, message, out = $stdout, &block)
  if defined?(HighLine::String)
    message.sub!(/^(\S*)/) { HighLine::String.new($1).public_send(color) }
  end

  if block_given?
    out.print("#{message}… ")
    yield
    log(:green, '✔︎')
  else
    out.puts(message)
  end
end

def die(message)
  puts
  log(:red, "FAIL #{message}", $stderr)
  exit(1)
end

setup!
